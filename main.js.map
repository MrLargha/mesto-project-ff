{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/utils.js","webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/scripts/index.js"],"sourcesContent":["// Анимация загрузки ответа от сервера на кнопках \"Сохранить\" в модальных окнах\nexport function renderLoadingForm(isLoading, popupButton) {\n    if (isLoading) {\n      popupButton.textContent = \"Сохранение...\";\n    } else {\n      popupButton.textContent = \"Сохранить\";\n    }\n  }","export const config = {\n  baseUrl: \"https://nomoreparties.co/v1/cohort-bac-2\",\n  headers: {\n    authorization: \"90452c92-776a-4c8d-9f54-cdf664e8b999\",\n    \"Content-Type\": \"application/json\",\n  },\n};\n\n// Обработка ответа от сервера\nexport const handleResponse = (res) => {\n  if (res.ok) {\n    return res.json();\n  } else {\n    throw new Error(\"Неверный код ответа сервера\");\n  }\n};\n\n// Получение карточек\nexport const getCardsFromServer = () => {\n  return fetch(config.baseUrl + \"/cards\", {\n    headers: config.headers\n  }).then(handleResponse);\n};\n\n// Получение данных пользователя\nexport const getUserData = () => {\n  return fetch(config.baseUrl + \"/users/me\", {\n    headers: config.headers\n  }).then(handleResponse);\n};\n\n// Запрос на изменение данных пользователя\nexport const editUserData = (newName, newDescription) => {\n  return fetch(config.baseUrl + \"/users/me\", {\n    method: \"PATCH\",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: newName,\n      about: newDescription,\n    }),\n  }).then(handleResponse);\n};\n\n// Запостить еще карточку\nexport const postNewCard = (newCard) => {\n  return fetch(config.baseUrl + \"/cards\", {\n    method: \"POST\",\n    headers: config.headers,\n    body: JSON.stringify({\n      name: newCard.name,\n      link: newCard.link,\n    }),\n  }).then(handleResponse);\n};\n\n// Удалить карточку из сервера\nexport const deleteCardFromServer = (card) => {\n  return fetch(config.baseUrl + \"/cards/\" + card._id, {\n    method: \"DELETE\",\n    headers: config.headers\n  }).then(handleResponse);\n};\n\n// Поставить лайк карточке на сервере\nexport const likeCardOnServer = (card) => {\n  // Хз откуда взять card._id после публикации карты\n  // Возможно, от сервака ответ приходит\n  return fetch(config.baseUrl + \"/cards/likes/\" + card._id, {\n    method: \"PUT\",\n    headers: {\n      authorization: config.headers.authorization,\n    },\n  }).then(handleResponse);\n};\n\n// Убрать лайк\nexport const dislikeCardOnServer = (card) => {\n  return fetch(config.baseUrl + \"/cards/likes/\" + card._id, {\n    method: \"DELETE\",\n    headers: {\n      authorization: config.headers.authorization,\n    },\n  }).then(handleResponse);\n};\n\n// Обновить аватарку\nexport const postNewAvatar = (url) => {\n  return fetch(config.baseUrl + \"/users/me/avatar\", {\n    method: \"PATCH\",\n    headers: {\n      authorization: config.headers.authorization,\n      \"Content-Type\": config.headers[\"Content-Type\"],\n    },\n    body: JSON.stringify({\n      avatar: url,\n    }),\n  }).then(handleResponse);\n};\n","import {\n  deleteCardFromServer,\n  likeCardOnServer,\n  dislikeCardOnServer,\n} from \"./api.js\";\n\n// Темлпейт карточки\nconst cardTemplate = document.querySelector(\"#card-template\").content;\n\n// Функция удаления карточки\nexport function deleteCard(event, card) {\n  const deleteItem = event.target.closest(\".card\");\n  deleteCardFromServer(card)\n    .then(() => {\n      deleteItem.remove();\n    })\n    .catch((error) => {\n      console.log(`Ошибка: ${error.message}`);\n    });\n}\n\n// Функция лайка карточки\nexport function likeCard(event, card) {\n  const likeButton = event.currentTarget;\n  const likeContainer = likeButton\n    .closest(\".card__description\")\n    .querySelector(\".card__like-container\");\n  const likeCountElement = likeContainer.querySelector(\n    \".card__like-button_likes\"\n  );\n\n  // Ставим/убираем лайк\n  if (!likeButton.classList.contains(\"card__like-button_is-active\")) {\n    likeCardOnServer(card)\n      .then((data) => {\n        likeCountElement.textContent = data.likes.length;\n        likeButton.classList.add(\"card__like-button_is-active\");\n      })\n      .catch((error) => {\n        console.log(`Ошибка: ${error.message}`);\n      });\n  } else {\n    dislikeCardOnServer(card)\n      .then((data) => {\n        if (data.likes.length > 0) {\n          likeCountElement.textContent = data.likes.length;\n        } else {\n          likeCountElement.textContent = \"\";\n        }\n        likeButton.classList.remove(\"card__like-button_is-active\");\n      })\n      .catch((error) => {\n        console.log(`Ошибка: ${error.message}`);\n      });\n  }\n}\n\n// Функция получения шаблона карточки\nfunction getCardTemplate() {\n  return cardTemplate.querySelector(\".card\").cloneNode(true);\n}\n\n// Функция создания карточки\nexport function createCard(\n  userId,\n  card,\n  deleteCallback,\n  likeCallBack,\n  openCallback\n) {\n  const cardElement = getCardTemplate();\n  const cardImage = cardElement.querySelector(\".card__image\"); // Выносим поиск элемента в отдельную переменную\n  const likeButton = cardElement.querySelector(\".card__like-button\");\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\n\n  cardElement.querySelector(\".card__title\").textContent = card.name;\n  cardImage.src = card.link; \n  cardImage.alt = \"Изображение \" + card.name; \n\n  // Отображение лайков на карточке\n  if (card.likes.length > 0) {\n    cardElement.querySelector(\".card__like-button_likes\").textContent =\n      card.likes.length;\n  }\n\n  card.likes.forEach((like) => {\n    // Проверяем совпадение id пользователя\n    if (like._id === userId) {\n      likeButton.classList.add(\"card__like-button_is-active\");\n    }\n  });\n\n  // Установка слушателей\n  cardImage.addEventListener(\"click\", openCallback);\n  likeButton.addEventListener(\"click\", (event) => {\n    likeCallBack(event, card);\n  });\n  if (userId === card.owner._id) {\n    deleteButton.addEventListener(\"click\", (event) => deleteCallback(event, card));\n  } else {\n    deleteButton.remove();\n  }\n\n  return cardElement;\n}\n","// Закрыть модальное окно\nexport function closeModal(modal) {\n  modal.classList.remove(\"popup_is-opened\");\n\n  modal.removeEventListener(\"click\", handleOverlayClick);\n  document.removeEventListener(\"keydown\", handleKeyDown);\n  modal\n    .querySelector(\".popup__close\")\n    .removeEventListener(\"click\", handleCloseButtonClick);\n\n  setTimeout(function () {\n    modal.classList.remove(\"popup_is-animated\");\n  }, 600); // Задержка анимации, в миллисекундах\n}\n\n// Открыть модальное окно\nexport function openModal(modal) {\n  modal.classList.add(\"popup_is-animated\");\n\n  setTimeout(function () {\n    modal.classList.add(\"popup_is-opened\");\n  }, 1); \n\n  modal.addEventListener(\"click\", handleOverlayClick);\n  document.addEventListener(\"keydown\", handleKeyDown);\n  modal\n    .querySelector(\".popup__close\")\n    .addEventListener(\"click\", handleCloseButtonClick);\n}\n\n//Обработчики закрытия попапов:\nfunction handleOverlayClick(event) {\n  const modal = event.currentTarget;\n  if (event.target === modal) {\n    closeModal(modal);\n  }\n}\n\n// Закрытие через кнопку крестика\nfunction handleCloseButtonClick(event) {\n  const modal = event.target.closest(\".popup\");\n  closeModal(modal);\n}\n\n// Закрытие через Esc\nfunction handleKeyDown(event) {\n  if (event.key === \"Escape\") {\n    const openedModal = document.querySelector(\".popup_is-opened\");\n    closeModal(openedModal);\n  }\n}\n","// Показать ошибку ввода\nexport const showInputError = (\n  formElement,\n  inputElement,\n  errorMessage,\n  { inputErrorClass, errorClass }\n) => {\n  const errorElement = formElement.querySelector(\n    `.${inputElement.name}-input-error`\n  );\n  inputElement.classList.add(inputErrorClass);\n  errorElement.textContent = errorMessage;\n  errorElement.classList.add(errorClass);\n};\n\n// Скрыть ошибку ввода\nexport const hideInputError = (\n  formElement,\n  inputElement,\n  { inputErrorClass, errorClass }\n) => {\n  const errorElement = formElement.querySelector(\n    `.${inputElement.name}-input-error`\n  );\n  inputElement.classList.remove(inputErrorClass);\n  errorElement.classList.remove(errorClass);\n  errorElement.textContent = \"\";\n};\n\n// Проверка валидности ввода\nexport const checkInputValidity = (formElement, inputElement, settings) => {\n  if (inputElement.validity.patternMismatch) {\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n  } else {\n    inputElement.setCustomValidity(\"\");\n  }\n\n  if (!inputElement.validity.valid) {\n    showInputError(\n      formElement,\n      inputElement,\n      inputElement.validationMessage,\n      settings\n    );\n  } else {\n    hideInputError(formElement, inputElement, settings);\n  }\n};\n\n// Установка слушателей событий для полей ввода\nexport const setEventListeners = (formElement, settings) => {\n  const inputList = Array.from(\n    formElement.querySelectorAll(settings.inputSelector)\n  );\n  const buttonElement = formElement.querySelector(\n    settings.submitButtonSelector\n  );\n  toggleButtonState(inputList, buttonElement, settings);\n\n  inputList.forEach((inputElement) => {\n    inputElement.addEventListener(\"input\", () => {\n      checkInputValidity(formElement, inputElement, settings);\n      toggleButtonState(inputList, buttonElement, settings);\n    });\n  });\n};\n\n// Переключение состояния кнопки (активна/неактивна)\nexport const toggleButtonState = (\n  inputList,\n  buttonElement,\n  { inactiveButtonClass }\n) => {\n  const isFormInvalid = inputList.some(\n    (inputElement) => !inputElement.validity.valid\n  );\n  buttonElement.disabled = isFormInvalid;\n  if (isFormInvalid) {\n    buttonElement.classList.add(inactiveButtonClass);\n  } else {\n    buttonElement.classList.remove(inactiveButtonClass);\n  }\n};\n\n// Очистка ошибок валидации и сделать кнопку неактивной\nexport const clearValidation = (formElement, settings) => {\n  const inputList = Array.from(\n    formElement.querySelectorAll(settings.inputSelector)\n  );\n  const buttonElement = formElement.querySelector(\n    settings.submitButtonSelector\n  );\n\n  inputList.forEach((inputElement) => {\n    hideInputError(formElement, inputElement, settings);\n  });\n\n  buttonElement.disabled = true;\n  buttonElement.classList.add(settings.inactiveButtonClass);\n};\n\n// Включение валидации всех форм\nexport const enableValidation = (settings) => {\n  const formList = Array.from(document.querySelectorAll(settings.formSelector));\n  formList.forEach((formElement) => {\n    setEventListeners(formElement, settings);\n  });\n};","import \"../pages/index.css\"; \nimport { renderLoadingForm } from \"./utils.js\";\nimport { deleteCard, createCard, likeCard } from \"./card.js\"; \nimport { openModal, closeModal } from \"./modal.js\"; \nimport { clearValidation, enableValidation } from \"./validation.js\";\nimport {\n  getCardsFromServer,\n  getUserData,\n  editUserData,\n  postNewCard,\n  postNewAvatar,\n} from \"./api.js\";\n\n// DOM Для карточек\nconst content = document.querySelector(\".places\");\nconst cardList = content.querySelector(\".places__list\");\n\n// DOM Для edit button\nconst editButton = document.querySelector(\".profile__edit-button\");\nconst editModal = document.querySelector(\".popup_type_edit\");\nconst editModalSubmitButton = editModal.querySelector(\".popup__button\")\nconst profileTitle = document.querySelector(\".profile__title\");\nconst profileDescription = document.querySelector(\".profile__description\");\nconst newProfileNameInput = editModal.querySelector(\".popup__input_type_name\");\nconst newProfileDescriptionInput = editModal.querySelector(\n  \".popup__input_type_description\"\n);\n\n// DOM Для add button\nconst newCardButton = document.querySelector(\".profile__add-button\");\nconst newCardModal = document.querySelector(\".popup_type_new-card\");\nconst newCardNameInput = newCardModal.querySelector(\n  \".popup__input_type_card-name\"\n);\nconst newCardUrlInput = newCardModal.querySelector(\".popup__input_type_url\");\nconst newCardFormElement = newCardModal.querySelector(\".popup__form\");\nconst newCardModalSubmitButton = newCardModal.querySelector(\".popup__button\")\n\n// DOM для открытия карточек\nconst cardModal = document.querySelector(\".popup_type_image\");\nconst imageElement = cardModal.querySelector(\".popup__image\");\nconst captionElement = cardModal.querySelector(\".popup__caption\");\n\n// DOM для edit image button\nconst avatarImage = document.querySelector(\".profile__image\");\nconst newImageModal = document.querySelector(\".popup_type_new-image\");\nconst newImageModalInput = newImageModal.querySelector(\n  \".popup__input_type_url\"\n);\nconst newImageButton = document.querySelector(\".profile__image-edit-button\");\nconst avatarForm = newImageModal.querySelector(\".popup__form\");\nconst avatarSubmitButton = newImageModal.querySelector(\".popup__button\")\n\nlet userId;\n\n// Элемент настроек валидации\nconst validationConfig = {\n  formSelector: \".popup__form\",\n  inputSelector: \".popup__input\",\n  submitButtonSelector: \".popup__button\",\n  inactiveButtonClass: \"button_inactive\",\n  inputErrorClass: \"popup__input_type_error\",\n  errorClass: \"popup__error_visible\",\n};\n\neditButton.addEventListener(\"click\", () => {\n  clearValidation(editModal, validationConfig);\n  editModalFunction(editModal);\n});\n\n// Добавить слушатель на кнопку add\nnewCardButton.addEventListener(\"click\", () => {\n  clearValidation(newCardModal, validationConfig);\n  openModal(newCardModal);\n});\n\n// Добавить слушатель на кнопку edit image\nnewImageButton.addEventListener(\"click\", () => {\n  clearValidation(newImageModal, validationConfig);\n  openModal(newImageModal);\n});\n\n// Добавить обработчик события submit для формы new card в модальном окне\nnewCardFormElement\n  .addEventListener(\"submit\", newCardFormHandler);\n\n// Добавить обработчик события submit для формы edit в модальном окне\neditModal\n  .querySelector(\".popup__form\")\n  .addEventListener(\"submit\", editFormHandler);\n\n// Добавить обработчик события submit для формы new image в модальном окне\navatarForm\n  .addEventListener(\"submit\", submitEditAvatarForm);\n\n// Поведение попапа изменения профиля (edit)\nfunction editModalFunction(modal) {\n  newProfileNameInput.value = profileTitle.textContent;\n  newProfileDescriptionInput.value = profileDescription.textContent;\n\n  // Открываем модальное окно\n  openModal(modal);\n}\n\n// Обработчики submit\nfunction submitEditAvatarForm(event) {\n  event.preventDefault();\n\n  renderLoadingForm(true, avatarSubmitButton);\n  postNewAvatar(newImageModalInput.value)\n    .then((res) => {\n      avatarImage.style.backgroundImage = `url(${res.avatar})`;\n      avatarForm.reset();\n      closeModal(newImageModal);\n    })\n    .catch((error) => {\n      console.log(`Ошибка: ${error.message}`);\n    })\n    .finally(() => {\n      renderLoadingForm(false, avatarSubmitButton);\n    });\n}\n\n// Обработчик edit button\nfunction editFormHandler(event) {\n  event.preventDefault();\n  renderLoadingForm(true, editModalSubmitButton);\n  const newName = newProfileNameInput.value;\n  const newDescription = newProfileDescriptionInput.value;\n\n  //Изменяем настройки на сервере\n  editUserData(newName, newDescription)\n    .then((res) => {\n      profileTitle.textContent = res.name;\n      profileDescription.textContent = res.about;\n      closeModal(editModal);\n    })\n    .catch((error) => {\n      console.log(`Ошибка: ${error.message}`);\n    })\n    .finally(() => {\n      renderLoadingForm(false, editModalSubmitButton);\n    });\n}\n\n// Обработчик new button\nfunction newCardFormHandler(event) {\n  event.preventDefault();\n  renderLoadingForm(true, newCardModalSubmitButton);\n  const newCard = {\n    name: newCardNameInput.value,\n    link: newCardUrlInput.value,\n  };\n\n  postNewCard(newCard)\n    .then((res) => {\n      // Добавляем новую карточку в список\n      const cardElement = createCard(\n        userId,\n        res,\n        deleteCard,\n        likeCard,\n        openCard\n      );\n\n      // Добавление карточки в DOM\n      cardList.prepend(cardElement);\n\n      // Очищаем поля формы с помощью метода reset()\n      newCardFormElement.reset();\n\n      // Закрываем модальное окно\n      closeModal(newCardModal);\n    })\n    // Не получилось запостить новую карточку\n    .catch((error) => {\n      console.log(`Ошибка: ${error.message}`);\n    })\n    .finally(() => {\n      renderLoadingForm(false, newCardModalSubmitButton);\n    });\n}\n\n// Функция открытия карточки\nfunction openCard(event) {\n  const link = event.currentTarget.src;\n  const caption = event.currentTarget.parentNode.querySelector(\".card__title\").textContent;\n\n  // Присваиваем значения карточки значению попапа\n  imageElement.src = link;\n  imageElement.alt = caption;\n  captionElement.textContent = caption;\n\n  openModal(cardModal);\n}\n\n\n// Ждём пока загрузится DOM\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // Вызываем функцию enableValidation с передачей объекта настроек\n  enableValidation(validationConfig);\n});\n\n\n// Обработка карточек с сервера\nfunction renderCardsFromServer(data, userId) {\n  data.forEach((item) => {\n    const cardElement = createCard(\n      userId,\n      item,\n      deleteCard,\n      likeCard,\n      openCard\n    );\n    // Добавление карточки в DOM\n    cardList.append(cardElement);\n  });\n}\n\n// Обработка профиля с сервера\nfunction renderUserFromServer(user) {\n  avatarImage.style.backgroundImage = `url(${user.avatar})`;\n  profileTitle.textContent = user.name;\n  profileDescription.textContent = user.about;\n}\n\n// Базовая логика подгрузки информации о карточках и пользователе с сервера\nPromise.all([getCardsFromServer(), getUserData()])\n  .then(([data, user]) => {\n    userId = user._id;\n    renderCardsFromServer(data, user._id);\n    renderUserFromServer(user);\n  })\n  .catch((error) => {\n    console.log(`Ошибка: ${error.message}`);\n  });\n"],"names":["renderLoadingForm","isLoading","popupButton","textContent","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Error","cardTemplate","document","querySelector","content","deleteCard","event","card","deleteItem","target","closest","fetch","_id","method","then","deleteCardFromServer","remove","catch","error","console","log","concat","message","likeCard","likeButton","currentTarget","likeCountElement","classList","contains","dislikeCardOnServer","data","likes","length","likeCardOnServer","add","createCard","userId","deleteCallback","likeCallBack","openCallback","cardElement","cloneNode","cardImage","deleteButton","name","src","link","alt","forEach","like","addEventListener","owner","closeModal","modal","removeEventListener","handleOverlayClick","handleKeyDown","handleCloseButtonClick","setTimeout","openModal","key","hideInputError","formElement","inputElement","_ref2","inputErrorClass","errorClass","errorElement","toggleButtonState","inputList","buttonElement","_ref3","inactiveButtonClass","isFormInvalid","some","validity","valid","disabled","clearValidation","settings","Array","from","querySelectorAll","inputSelector","submitButtonSelector","cardList","editButton","editModal","editModalSubmitButton","profileTitle","profileDescription","newProfileNameInput","newProfileDescriptionInput","newCardButton","newCardModal","newCardNameInput","newCardUrlInput","newCardFormElement","newCardModalSubmitButton","cardModal","imageElement","captionElement","avatarImage","newImageModal","newImageModalInput","newImageButton","avatarForm","avatarSubmitButton","validationConfig","formSelector","openCard","caption","parentNode","value","preventDefault","newCard","body","JSON","stringify","postNewCard","prepend","reset","finally","newName","newDescription","about","editUserData","url","avatar","style","backgroundImage","patternMismatch","setCustomValidity","dataset","errorMessage","_ref","showInputError","validationMessage","checkInputValidity","setEventListeners","Promise","all","user","item","append","renderCardsFromServer","renderUserFromServer"],"sourceRoot":""}